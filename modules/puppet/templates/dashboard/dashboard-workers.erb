<%
cpus = scope.lookupvar( "::processorcount" )
%>
#!/bin/bash
# This file is controlled by puppet. Do NOT edit! #
### BEGIN INIT INFO
# Provides:          dashboard-workers
# Required-Start:    $local_fs $remote_fs $network $syslog
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# X-Interactive:     true
# Short-Description: Start/stop dashboard delayed_job workers
### END INIT INFO
#
# dashboard-workers   This init.d script is used to start dashboard workers

name=dashboard-workers
ENV="env -i LANG=C PATH=/usr/local/bin:/usr/bin:/bin"

. /lib/lsb/init-functions

test -f /etc/default/rcS && . /etc/default/rcS

DASHBOARD_HOME=<%= scope.lookupvar( "puppet::params::dashboard_path" ) %>
DASHBOARD_USER=<%= scope.lookupvar( "puppet::params::dashboard_user" ) %>
DASHBOARD_RUBY=`which ruby`
DASHBOARD_ENVIRONMENT=production
DASHBOARD_PORT=<%= scope.lookupvar( "puppet::params::dashboard_report_port" ) %>
NUM_DELAYED_JOB_WORKERS=<%= cpus %>

is_puppet_dashboard_workers_running() {
    RETVAL=1
    for pidfile in $(ls -1 "${DASHBOARD_HOME}"/tmp/pids/*.pid 2> /dev/null | grep -v monitor)
    do
      status_of_proc -p $pidfile ${DASHBOARD_RUBY} "Puppet Dashboard Worker (pid $(cat $pidfile))"  ||  return $?
      RETVAL=$?
    done
    return $RETVAL
}

# We only want to wait for the workers to start if we are starting, but not if
# we are merely checking the status of the workers.
wait_for_worker_start() {
    # When starting the workers we can have a situation where the pidfiles have not been created by the time
    # delayed_job starts and returns. Poll for at least one pidfile existing before returning its status.
    i=0
    while [ `ls -1 "${DASHBOARD_HOME}"/tmp/pids/*.pid 2>/dev/null | grep -v monitor | wc -l` -ne ${NUM_DELAYED_JOB_WORKERS} ]
    do
      if [ $i = '10' ]; then
        log_daemon_msg "Could not find pidfiles for ${name}."
        return 1
      else
        i=$(($i+1))
        sleep 1
      fi
    done
}

stop_puppet_dashboard_workers() {
    start-stop-daemon  --start --quiet --oknodo --user ${DASHBOARD_USER} --chuid ${DASHBOARD_USER} --exec /bin/bash -- -e -c "
                pushd "${DASHBOARD_HOME}" &> /dev/null;
                  export PATH='${PATH}';
                  export RAILS_ENV=production;
                  ./script/delayed_job -p dashboard -n ${NUM_DELAYED_JOB_WORKERS} -m stop;
                popd &> /dev/null;"
    if [ `ls -1 "${DASHBOARD_HOME}"/tmp/pids/*.pid 2> /dev/null | grep -v monitor | wc -l` -eq 0 ]; then
      log_success_msg "${name} stopped"
    else
      log_failure_msg "${name} could not be stopped"
    fi
}

start_puppet_dashboard_workers() {
    if ! is_puppet_dashboard_workers_running; then
      start-stop-daemon  --start --quiet --oknodo --user ${DASHBOARD_USER} --chuid ${DASHBOARD_USER} --exec /bin/bash -- -e -c "
                  pushd "${DASHBOARD_HOME}" &> /dev/null;
                    export PATH='${PATH}';
                    export RAILS_ENV=production;
                    ./script/delayed_job -p dashboard -n ${NUM_DELAYED_JOB_WORKERS} -m start;
                  popd &> /dev/null;"
      wait_for_worker_start
      is_puppet_dashboard_workers_running
    else
      log_success_msg "${name} is already running"
      exit 0
    fi
}

case $1 in
    start)
        log_daemon_msg "Starting Puppet Dashboard Workers"
        if start_puppet_dashboard_workers; then
            log_end_msg 0
        else
            log_end_msg 1
        fi
    ;;
    stop)
        log_daemon_msg "Stopping Puppet Dashboard Workers"
        if stop_puppet_dashboard_workers ; then
            log_end_msg 0
        else
            log_end_msg 1
        fi
    ;;
    restart)
        log_daemon_msg "Restarting Puppet Dashboard Workers"
        stop_puppet_dashboard_workers
        RET="$?"
        case ${RET} in
            0)
                if start_puppet_dashboard_workers; then
                    log_end_msg 0
                else
                    log_end_msg 1
                fi
                ;;
            1)
                # Server not running
                log_progress_msg "(not running)"
                log_end_msg 0
                ;;
            *)
                # Failed to stop
                log_progress_msg "(failed to stop)"
                log_end_msg 1
                ;;
        esac
    ;;
    status)
        is_puppet_dashboard_workers_running
        RETVAL=$?
        if [ $RETVAL -ne 0 ] ; then
          log_daemon_msg "${name} is not running."
          exit $RETVAL
        else
          exit 0
        fi
    ;;
    *)
        log_action_msg "Usage: /etc/init.d/${name} {start|stop|restart|status}"
        exit 1
    ;;
esac

exit 0
